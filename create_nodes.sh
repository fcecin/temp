#!/bin/bash

# Check if the required number of nodes is provided
if [ -z "$1" ]; then
  echo "Usage: $0 <number_of_nodes>"
  exit 1
fi

N=$1
COMETBFT_DIR=$(pwd)

# Check if the cometbft executable exists
if [ ! -f "${COMETBFT_DIR}/cometbft" ]; then
  echo "Error: cometbft executable not found in ${COMETBFT_DIR}"
  exit 1
fi

BASE_PORT=26650

# Initialize each node
for i in $(seq 1 $N); do
  NODE_DIR="${COMETBFT_DIR}/n${i}"

  # Initialize the node
  mkdir -p "$NODE_DIR"
  if ! ./cometbft init validator --home "$NODE_DIR"; then
    echo "Error: failed to initialize validator for node $i"
    exit 1
  fi
done

# Gather validator information
VALIDATORS=""
for i in $(seq 1 $N); do
  NODE_DIR="${COMETBFT_DIR}/n${i}"
  VALIDATOR=$(jq -c '.validators[0]' "$NODE_DIR/config/genesis.json")
  if [ -z "$VALIDATOR" ]; then
    echo "Error: failed to get validator information for node $i"
    exit 1
  fi
  VALIDATORS+="${VALIDATOR},"
done
VALIDATORS=${VALIDATORS%,}

# Create a new genesis.json with all validators
jq ".validators = [${VALIDATORS}]" "${COMETBFT_DIR}/n1/config/genesis.json" > "${COMETBFT_DIR}/genesis.json"

# Distribute the new genesis.json to all nodes
for i in $(seq 1 $N); do
  NODE_DIR="${COMETBFT_DIR}/n${i}"
  cp "$NODE_DIR/config/genesis.json" "$NODE_DIR/config/backup.genesis.json"
  cp "${COMETBFT_DIR}/genesis.json" "$NODE_DIR/config/genesis.json"
done

# Update the config.toml for 10MB block size and unique ports
for i in $(seq 1 $N); do
  NODE_DIR="${COMETBFT_DIR}/n${i}"
  CONFIG_FILE="$NODE_DIR/config/config.toml"
  if [ ! -f "$CONFIG_FILE" ]; then
    echo "Error: config.toml not found for node $i"
    exit 1
  fi

  RPC_PORT=$((BASE_PORT + (i - 1) * 10))
  P2P_PORT=$((BASE_PORT + (i - 1) * 10 + 1))
  PROXY_APP_PORT=$((BASE_PORT + (i - 1) * 10 + 2))
  GRPC_PORT=$((BASE_PORT + (i - 1) * 10 + 3))
  PROMETHEUS_PORT=$((BASE_PORT + (i - 1) * 10 + 4))

  # Update the specific lines for the ports
  sed -i "/^\[rpc\]/,/^cors_allowed_origins/ { s|^laddr =.*|laddr = \"tcp://127.0.0.1:${RPC_PORT}\"| }" "$CONFIG_FILE"
  sed -i "/^\[p2p\]/,/^addr_book_strict/ { s|^laddr =.*|laddr = \"tcp://0.0.0.0:${P2P_PORT}\"| }" "$CONFIG_FILE"
  sed -i "s|^grpc_laddr =.*|grpc_laddr = \"tcp://127.0.0.1:${GRPC_PORT}\"|" "$CONFIG_FILE"
  sed -i "/^\[instrumentation\]/,/^namespace/ { s|^prometheus_listen_addr =.*|prometheus_listen_addr = \":${PROMETHEUS_PORT}\"| }" "$CONFIG_FILE"
  sed -i "s|^proxy_app =.*|proxy_app = \"tcp://127.0.0.1:${PROXY_APP_PORT}\"|" "$CONFIG_FILE"
  sed -i 's/^max_bytes = .*/max_bytes = 10485760/' "$CONFIG_FILE"

  # Mimic some configuration options generated by the `cometbft testnet` command-line command
  sed -i "s/^moniker = .*/moniker = \"n$i\"/" $NODE_DIR/config/config.toml
  sed -i "s/^addr_book_strict = .*/addr_book_strict = false/" $NODE_DIR/config/config.toml
  sed -i "s/^allow_duplicate_ip = .*/allow_duplicate_ip = true/" $NODE_DIR/config/config.toml

  # **** TWEAK THIS TO INCREASE THE MEMPOOL SIZE ****
  # Update mempool settings to allocate a 400,000 transaction
  #  mempool (with a byte size for 250 byte transactions)
  sed -i "s/^size = .*/size = 400000/" $CONFIG_FILE
  sed -i "s/^max_txs_bytes = .*/max_txs_bytes = 100000000/" $CONFIG_FILE
  
done

# Configure persistent_peers
for i in $(seq 1 $N); do
  NODE_DIR="${COMETBFT_DIR}/n${i}"
  PEERS=""

  for j in $(seq 1 $N); do
    if [ $i -ne $j ]; then
      PEER_ID=$(./cometbft show-node-id --home "${COMETBFT_DIR}/n${j}")
      P2P_PORT=$((BASE_PORT + (j - 1) * 10 + 1))
      if [ -z "$PEER_ID" ]; then
        echo "Error: failed to get node ID for node $j"
        exit 1
      fi
      PEERS+="${PEER_ID}@127.0.0.1:${P2P_PORT},"
    fi
  done

  # Remove trailing comma
  PEERS=${PEERS%,}

  # Set persistent peers
  CONFIG_FILE="$NODE_DIR/config/config.toml"
  if ! sed -i "s/^persistent_peers = .*/persistent_peers = \"${PEERS}\"/" "$CONFIG_FILE"; then
    echo "Error: failed to set persistent peers for node $i"
    exit 1
  fi
done

echo "Created $N CometBFT instances with unique ports."
